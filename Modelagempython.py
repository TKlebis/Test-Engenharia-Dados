# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G47_mPRa_3Ox_UCKw_KwWlN7mHrFWcUn
"""

import pandas as pd

df = pd.read_csv("/content/Sales.SpecialOfferProduct.csv", sep=';')

df.head(10)

df.info()

dados_faltantes = df.isna().sum()
dados_faltantes

df['ModifiedDate'] = pd.to_datetime(df['ModifiedDate'])

print(df.dtypes)

# Verifique se há linhas duplicadas no DataFrame
linhas_duplicadas = df[df.duplicated()]

# Exiba as linhas duplicadas (se houver)
print(linhas_duplicadas)

df.to_csv("Sales.SpecialOfferProduct_modified.csv", index=False)

df2 = pd.read_csv("/content/Sales.SalesOrderHeader.csv", sep=';')

df2.head(10)

df2.info()

dados_faltantes2 = df2.isna().sum()
dados_faltantes2

print(df2.columns)

colunas_para_substituir = ['SubTotal', 'TaxAmt', 'Freight', 'TotalDue']
for coluna in colunas_para_substituir:
    df2[coluna] = df2[coluna].str.replace(',', '.', regex=True)

df2.head(5)

df2[colunas_para_substituir] = df2[colunas_para_substituir].astype(float)

# Converter a coluna ModifiedDate em tipo datetime
df2['ModifiedDate'] = pd.to_datetime(df2['ModifiedDate'])

df2['Comment'] = df2['Comment'].fillna('sem comentario')

df2.info()



# Transforme as colunas em formato de data
df2['OrderDate'] = pd.to_datetime(df2['OrderDate'])
df2['DueDate'] = pd.to_datetime(df2['DueDate'])
df2['ShipDate'] = pd.to_datetime(df2['ShipDate'])

# Salvar o DataFrame modificado em um arquivo CSV
df2.to_csv("/content/Sales.SalesOrderHeader_modified.csv", sep=';', index=False)

# Substitua todos os valores nulos por 0
df2.fillna(0, inplace=True)

nomes_colunas = df2.columns.tolist()
nomes_colunas

df3= pd.read_csv('/content/Sales.SalesOrderDetail.csv', sep=';')

df3.head(10)

df3.info()

dados_faltantes3 = df3.isna().sum()
dados_faltantes3

# 2. Substituir vírgulas por pontos na coluna 'UnitPrice'
df3['UnitPriceDiscount'] = df3['UnitPriceDiscount'].str.replace(',', '.')

# 3. Converter a coluna 'UnitPrice' para float
df3['UnitPriceDiscount'] = df3['UnitPriceDiscount'].astype(float)

df3.head(10)

df3 = df3.dropna(subset=['CarrierTrackingNumber'], how='any')

dados_faltantes3 = df3.isna().sum()
dados_faltantes3

# Converter a coluna ModifiedDate em tipo datetime
df3['ModifiedDate'] = pd.to_datetime(df3['ModifiedDate'])

# Salvar o DataFrame modificado em um novo arquivo CSV
df3.to_csv('/content/Sales.SalesOrderDetail_modified.csv', sep=';', index=False)

df3.info()

df4= pd.read_csv('/content/Person.Person.csv', sep=';')

df4.head(10)

df4.info()

duplicados = df4[df4.duplicated()]
print(duplicados)

# Converter a coluna ModifiedDate em tipo datetime
df4['ModifiedDate'] = pd.to_datetime(df4['ModifiedDate'])

df4 = df4.fillna("Não Informado")

df4.head(10)

df4.to_csv('/content/Person.Person_modified.csv', sep=';', index=False)

df5= pd.read_csv('/content/Sales.Customer.csv', sep=';')

df5.head(10)

df4.info()

# Converter a coluna ModifiedDate em tipo datetime
df5['ModifiedDate'] = pd.to_datetime(df5['ModifiedDate'])

dados_faltantes5 = df5.isna().sum()
dados_faltantes5

df5['StoreID'].fillna(0, inplace=True)

df5['StoreID'] = df5['StoreID'].astype(float)

df5['PersonID'].fillna(0, inplace=True)

df5['PersonID'] = df5['PersonID'].astype(float)

df5.head(10)

duplicados = df5[df5.duplicated()]
print(duplicados)

# Especificar o caminho para o arquivo de destino
caminho_destino = '/content/Sales.Customer_modified.csv'

# Salvar o DataFrame modificado em um arquivo CSV
df5.to_csv(caminho_destino, index=False, sep=';')

df5.info()

df6= pd.read_csv('/content/Production.Product.csv', sep=';')

df6.head(5)

# Converter a coluna ModifiedDate em tipo datetime
df6['ModifiedDate'] = pd.to_datetime(df6['ModifiedDate'])

# Converter a coluna ModifiedDate em tipo datetime
df6['SellStartDate'] = pd.to_datetime(df6['SellStartDate'])

df6.info()

# Substitui os valores faltantes por "não informado"
df6.fillna('não informado', inplace=True)

# Substitui "não informado" por 0 na coluna SellEndDate
df6['SellEndDate'].replace('não informado', '0', inplace=True)

# Converte os valores para o formato de data
df6['SellEndDate'] = pd.to_datetime(df6['SellEndDate'], errors='coerce', format='%Y-%m-%d')

# Substitui "não informado" por 0 nas colunas ProductSubcategoryID e ProductModelID
df6['ProductSubcategoryID'].replace('não informado', 0, inplace=True)
df6['ProductModelID'].replace('não informado', 0, inplace=True)

# Converte as colunas para o tipo inteiro (int)
df6['ProductSubcategoryID'] = df6['ProductSubcategoryID'].astype(int)
df6['ProductModelID'] = df6['ProductModelID'].astype(int)

# Substitui "não informado" por 0 na coluna Weight
df6['Weight'].replace('não informado', 0, inplace=True)

# Converte a coluna para o tipo float
df6['Weight'] = df6['Weight'].astype(float)

# Substitui "," por "." nas colunas "ListPrice" e "StandardCost"
df6['ListPrice'] = df6['ListPrice'].str.replace(',', '.').astype(float)
df6['StandardCost'] = df6['StandardCost'].str.replace(',', '.').astype(float)

df6.info()

# Salva as modificações de volta em um arquivo CSV
df6.to_csv('/content/Production.Product_modified.csv', sep=';', index=False)